................Create Table........................
CREATE TABLE Students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    date_of_birth DATE,
    gender ENUM('M', 'F'),
    major VARCHAR(100),
    enrollment_year YEAR
);

CREATE TABLE Courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(100),
    course_code VARCHAR(10),
    credits INT,
    department VARCHAR(100)
);

CREATE TABLE Instructors (
    instructor_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    hire_date DATE,
    department VARCHAR(100)
);

CREATE TABLE Enrollments (
    enrollment_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT,
    course_id INT,
    grade CHAR(1),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Course_Assignments (
    assignment_id INT AUTO_INCREMENT PRIMARY KEY,
    instructor_id INT,
    course_id INT,
    semester VARCHAR(10),
    year YEAR,
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

-- Insert Students
INSERT INTO Students (first_name, last_name, email, date_of_birth, gender, major, enrollment_year)
VALUES 
('Mohammed', 'Nedal', 'Mohammed@example.com', '2001-05-15', 'M', 'Computer Science', 2020),
('Hamzeh', 'Zamel', 'Hamzeh@example.com', '2000-02-20', 'F', 'Business', 2019),
('Hamzeh', 'Zaiton', 'Zaiton@example.com', '2002-11-10', 'F', 'Mathematics', 2021),
-- add 7 more students.

-- Insert Instructors
INSERT INTO Instructors (first_name, last_name, email, hire_date, department)
VALUES
('Dr. Ghassan', 'Samara', 'Ghassan@university.edu', '2010-09-01', 'Computer Science'),
('Dr. Osama', 'Ababneh', 'Osama@university.edu', '2012-08-15', 'Mathematics'),
('Dr. Mohammed', 'Rasmi', 'Mohammed@university.edu', '2015-06-20', 'Business'),
('Dr. Fatima', 'Haimor', 'Fatima@university.edu', '2008-03-05', 'Physics'),
('Dr. Yazan', 'Khasawneh', 'Yazan@university.edu', '2017-11-10', 'Economics');

INSERT INTO Courses (course_name, course_code, credits, department)
VALUES
('Database Systems', 'CS101', 3, 'Computer Science'),
('Algebra', 'MATH201', 4, 'Mathematics'),
('Marketing 101', 'BUS301', 3, 'Business'),
('Quantum Physics', 'PHYS101', 4, 'Physics'),
('Microeconomics', 'ECON201', 3, 'Economics');

-- Assign Courses to Instructors
INSERT INTO Course_Assignments (instructor_id, course_id, semester, year)
VALUES
(1, 1, 'Fall', 2023),  -- Dr. Emily Clark teaches Database Systems
(2, 2, 'Fall', 2023),  -- Dr. Michael Williams teaches Algebra
(3, 3, 'Fall', 2023),  -- Dr. Sarah Robinson teaches Marketing 101
(4, 4, 'Fall', 2023),  -- Dr. David Johnson teaches Quantum Physics
(5, 5, 'Fall', 2023);  -- Dr. Anna Lee teaches Microeconomics


-- Enroll Students in Courses
INSERT INTO Enrollments (student_id, course_id, grade)
VALUES
(1, 1, 'A'), 
(2, 1, 'B'),  
(3, 2, 'A'),  
(4, 4, 'B+'), 
(5, 1, 'A'),  
(6, 3, 'B'),  
(7, 2, 'A-'), 
(8, 1, 'B+'), 
(10, 5, 'B'),
(1, 3, 'B+'); 
....................................
Basic Queries:
List all students along with their details:


SELECT * FROM Students;
Find the total number of courses offered by the university:

...........................................
SELECT COUNT(*) AS total_courses FROM Courses;
Show the names of all students enrolled in a specific course:


...........................................
SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.course_id = 1;  -- Replace 1 with specific course_id
Retrieve the email addresses of all instructors in a department:
...................................................................
SELECT email FROM Instructors WHERE department = 'Computer Science';
.....................................
Intermediate Queries:
List all courses along with the number of students enrolled:



SELECT c.course_name, COUNT(e.student_id) AS student_count
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;
Find the students who were enrolled in a course with a grade of 'A':

.....................................
SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.grade = 'A';
Retrieve the courses and the instructors assigned for a specific semester:


....................................
SELECT c.course_name, i.first_name, i.last_name
FROM Courses c
JOIN Course_Assignments ca ON c.course_id = ca.course_id
JOIN Instructors i ON ca.instructor_id = i.instructor_id
WHERE ca.semester = 'Fall' AND ca.year = 2023;
Find the average grade for a particular course:
....................................
SELECT AVG(grade) AS average_grade
FROM Enrollments
WHERE course_id = 1; 
....................................
Advanced Queries:
List students taking more than 3 courses in the current semester:


SELECT s.first_name, s.last_name, COUNT(e.course_id) AS course_count
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Course_Assignments ca ON e.course_id = ca.course_id
WHERE ca.semester = 'Fall' AND ca.year = 2023
GROUP BY s.student_id
HAVING course_count > 3;
Generate a report of students with incomplete grades (NULL grade):


....................................
SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.grade IS NULL;
Show the student with the highest average grade across courses:

...................................
SELECT s.first_name, s.last_name, AVG(e.grade) AS avg_grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
GROUP BY s.student_id
ORDER BY avg_grade DESC
LIMIT 1;
Find the department with the most courses taught this year:

...................................
SELECT department, COUNT(*) AS course_count
FROM Courses c
JOIN Course_Assignments ca ON c.course_id = ca.course_id
WHERE ca.year = 2023
GROUP BY department
ORDER BY course_count DESC
LIMIT 1;
List courses with no student enrollments:

..................................
SELECT c.course_name
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
WHERE e.course_id IS NULL;

.................................................
Step 4: Functions and Aggregates

Create a function to calculate a student's age based on date_of_birth:
DELIMITER $$
CREATE FUNCTION CalculateAge(dob DATE) RETURNS INT
BEGIN
    RETURN YEAR(CURDATE()) - YEAR(dob);
END$$
DELIMITER ;
.................
Execute the Query:
SELECT first_name, last_name, CalculateAge(date_of_birth) AS age FROM Students;
............................................................
Create a stored procedure to enroll a student in a course:

CREATE PROCEDURE EnrollStudent(IN student INT, IN course INT, IN grade CHAR(1))
BEGIN
    INSERT INTO Enrollments (student_id, course_id, grade)
    VALUES (student, course, grade);
END;
...........................................................
Use aggregate functions to show average grades by department:
SELECT c.department, AVG(e.grade) AS average_grade
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.department;
...........................................................
Step 5: Constraints and Transactions

Add a constraint to ensure unique student emails:

This is already enforced in the table creation using UNIQUE on the email field.
...............................................
Write a transaction to enroll a student if the course capacity isn't exceeded:


START TRANSACTION;

IF (SELECT COUNT(*) FROM Enrollments WHERE course_id = 1) < 30 THEN  -- Assuming capacity is 30
    INSERT INTO Enrollments (student_id, course_id, grade) VALUES (1, 1, 'A');
    COMMIT;
ELSE
    ROLLBACK;
END IF;
...............................................
Step 6: Optimization and Indexes

Create an index on the course_code:

CREATE INDEX idx_course_code ON Courses(course_code);

..................................................
Optimize a query using EXPLAIN:

EXPLAIN SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
WHERE e.course_id = 1;
.................................................
Step 7: Joins

Inner join to fetch students and the courses they are enrolled in:

SELECT s.first_name, s.last_name, c.course_name
FROM Students s
INNER JOIN Enrollments e ON s.student_id = e.student_id
INNER JOIN Courses c ON e.course_id = c.course_id;
......................................................
Left join to show instructors and the courses they teach:


SELECT i.first_name, i.last_name, c.course_name
FROM Instructors i
LEFT JOIN Course_Assignments ca ON i.instructor_id = ca.instructor_id
LEFT JOIN Courses c ON ca.course_id = c.course_id;
.....................................................
Query using UNION to list all students and instructors:

SELECT first_name, last_name FROM Students
UNION
SELECT first_name, last_name FROM Instructors;
.....................................................
Step 8: Final Challenge
Generate a report showing each student's name, email, major, courses enrolled, instructor, grades, and total credits:


SELECT s.first_name, s.last_name, s.email, s.major, c.course_name, i.first_name AS instructor_first_name, i.last_name AS instructor_last_name, e.grade, c.credits
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
JOIN Course_Assignments ca ON c.course_id = ca.course_id
JOIN Instructors i ON ca.instructor_id = i.instructor_id;

























